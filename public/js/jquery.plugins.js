// Generated by CoffeeScript 1.3.3

$.jsonrpc = function(method, params, success, failure, options) {
  var ajax;
  options = options || {};
  success = success || $.noop;
  failure = failure || function(errMsg, errCode) {
    return console.error("Error " + errCode + ": " + errMsg);
  };
  ajax = {
    type: "POST",
    url: "/jsonrpc",
    processData: false,
    dataType: "json",
    data: JSON.stringify({
      jsonrpc: "2.0",
      method: method,
      params: params,
      id: 1
    }),
    success: function(result) {
      if (result.error !== undefined && result.error.message) {
        if (result.error.message.substr(0, 8) === "!logout:") {
          document.location = "/login";
        }
        return failure(result.error.message, result.error.code);
      }
      return success(result.result);
    },
    error: function(jqXHR, textStatus, errorThrown) {
      return failure(textStatus, 0);
    }
  };
  if (options.async !== undefined) {
    ajax.async = options.async;
  }
  $.ajax(ajax);
};

$.jsonrpcSync = function(method, params, success, failure, options) {
  options = options || {};
  options.async = false;
  return $.jsonrpc(method, params, success, failure, options);
};

$.ajaxPanel = function(url, success, failure) {
  failure = failure || function(errMsg, errCode) {
    return console.error("Error " + errCode + ": " + errMsg);
  };
  $.ajax({
    type: "GET",
    url: url,
    processData: false,
    success: success
  });
};

$.jade = {};

$.jade.getTemplate = function(url, success, options) {
  var fn, fnRaw;
  fnRaw = url.replace(/[\/-]/g, "_");
  fn = void 0;
  if (fnRaw.charAt(0) === "_") {
    fnRaw = fnRaw.substr(1);
  }
  fn = "views_" + fnRaw;
  if (document[fn] !== undefined) {
    return success(fn);
  }
  $.ajax({
    url: url + ".jade",
    dataType: "script",
    success: function() {
      fnRaw = url.replace(/[\/-]/g, "_");
      fn = void 0;
      if (fnRaw.charAt(0) === "_") {
        fnRaw = fnRaw.substr(1);
      }
      fn = "views_" + fnRaw;
      return success(fn);
    },
    failure: function(error) {
      return alert(error);
    }
  });
};

$.jade.renderSync = function(fn, obj, failure) {
  var attrs;
  attrs = function(o) {
    var r;
    r = " ";
    $.each(o, function(i, n) {
      return r += i + "=\"" + n + "\"";
    });
    return r;
  };
  return document[fn](obj, attrs, (function(val) {
    return val;
  }), failure);
};

$.pv3 = {};

$.pv3.growl = {};

$.pv3.growl.hide = function() {
  return $(".task-status").removeClass("active").css("display", "none");
};

/*
@param type "success" or "error"
@param message HTML message (can be raw text)
*/


$.pv3.growl.show = function(type, message) {
  $.pv3.growl.hide();
  $(".task-status." + type).css("display", "block").addClass("active");
  return $(".status-content h2").html(type).next().html(message);
};

$.pv3.state = {};

$.pv3.state.get = function(success, options) {
  return $.jsonrpc("user/get-state", {}, (function(data) {
    if (data !== undefined) {
      $.pv3.state.current = data;
      if (success) {
        success();
      }
      return $(document).ready(function() {
        return $(this).trigger("restore");
      });
    }
  }), (function(error) {
    return console.error(error);
  }), options);
};

$.pv3.state.restoreModule = function() {
  var module;
  module = (!$.pv3.state.current.modules.selected || $.pv3.state.current.modules.selected === "" ? "home" : $.pv3.state.current.modules.selected);
  module = module.replace("#", "");
  window.history.pushState("", module, "/" + module);
  $("#main-container").trigger("ajaxUnload");
  $.pv3.state.update("modules.selected", module);
  $.ajax("/modules/" + module + "?ajax=1", {
    success: function(data) {
      var modules;
      $("#ajax-container").html(data);
      $(".selected").removeClass("selected");
      $("#spine-inner nav li a#nav-" + module).parent().addClass("selected");
      $(".ajax-spinner").hide();
      modules = $.pv3.state.current.modules;
      if (modules[modules.selected] !== undefined && modules[modules.selected].panel !== undefined && (modules[modules.selected].panel.active != null)) {
        return $.pv3.panel.show(modules[modules.selected].panel.active.url, modules[modules.selected].panel.active.options);
      }
    }
  });
};

$.pv3.state.restore = function() {
  return $(document).ready(function() {
    if ($.pv3.state.current === undefined) {
      return $.pv3.state.get(function() {
        if ($.pv3.state.current.modules !== undefined && $.pv3.state.current.modules.selected !== undefined) {
          return $.pv3.state.restoreModule($.pv3.state.current.modules);
        }
      });
    }
  });
};

$.pv3.state.update = function(stateName, stateValue) {
  return $.jsonrpc("user/update-state", {
    name: stateName,
    value: stateValue
  }, (function(result) {
    return $.pv3.state.current = result;
  }), function(error) {
    return console.error(error);
  });
};

$.pv3.panel = {};

$.pv3.panel.show = function(url, options) {
  var active;
  active = false;
  options = options || {};
  try {
    active = $.pv3.state.current.modules[$.pv3.state.current.modules.selected].panel.active;
  } catch (_) {
    console.warn("$.pv3.state.current.modules.panel is still not being returned!");
  }
  if (options.jsonrpcMethod === undefined) {
    options.jsonrpcMethod = "view" + url;
  }
  if (active && active.options.tabid === options.tabid) {
    if (options.temporary !== undefined) {
      $(".sectional-tabs").find(".temporary-panel-tab").remove();
      $(".ajax-panel-content").empty();
    }
    $(".standout-disabled").removeClass("standout-disabled").addClass("standout-tab");
    $(".sectional-tabs").restoreStandoutElement();
    $.pv3.panel.hide();
    return;
  }
  if (options.temporary === undefined && $(".sectional-tabs").find(".temporary-panel-tab").length) {
    $(".standout-disabled").removeClass("standout-disabled").addClass("standout-tab");
    $(".sectional-tabs").restoreStandoutElement();
    $(".sectional-tabs").find(".temporary-panel-tab").remove();
    $(".ajax-panel-content").empty();
  }
  return $.jsonrpc(options.jsonrpcMethod, {}, function(obj) {
    return $.jade.getTemplate(url, function(fn) {
      var $sectionPanel, $sectionalTabs;
      $sectionalTabs = $(".sectional-tabs");
      $sectionPanel = $("#section-panel");
      $.pv3.state.update("modules." + $.pv3.state.current.modules.selected + ".panel.active", {
        url: url,
        options: options
      });
      $sectionalTabs.find("li").removeClass("active").filter(".standout-tab").removeClass("standout-tab").addClass("standout-disabled");
      $sectionalTabs.find("#" + options.tabid).addClass("active");
      $sectionalTabs.reorderActiveElement();
      $sectionPanel.removeClass().addClass(options.panel_size);
      $(".ajax-panel-content").html($.jade.renderSync(fn, obj, function(err, file, line) {
        return $(".ajax-panel-content").html("Error in " + file + " at line " + line + ": " + err);
      }));
      return $(".x-panel").unbind("click").on("click", function(e) {
        e.preventDefault();
        $(".standout-disabled").removeClass("standout-disabled").addClass("standout-tab");
        $sectionalTabs.restoreStandoutElement();
        $(".sectional-tabs").find(".temporary-panel-tab").remove();
        $(".ajax-panel-content").empty();
        return $.pv3.panel.hide();
      });
    });
  });
};

$.pv3.panel.hide = function() {
  var $sectionPanel;
  $sectionPanel = $("#section-panel");
  if ($sectionPanel.hasClass("hidden")) {
    $sectionPanel.removeClass("hidden");
    $(this).addClass("active");
  } else {
    $sectionPanel.addClass("hidden");
    $(".sectional-tabs .active").removeClass("active");
  }
  return $.pv3.state.update("modules." + $.pv3.state.current.modules.selected + ".panel.active", null);
};

$.fn.reorderActiveElement = function() {
  return this.children(".active").detach().prependTo(this);
};

$.fn.restoreStandoutElement = function() {
  return this.children(".standout-tab").detach().prependTo(this);
};
