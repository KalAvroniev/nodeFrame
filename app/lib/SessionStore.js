// Generated by CoffeeScript 1.3.3
(function() {
  var SessionStore, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  SessionStore = (function(_super) {

    __extends(SessionStore, _super);

    module.exports = SessionStore;

    function SessionStore() {
      var _this = this;
      this.sessions = {};
      this.Store = new (app.config.store === 'memcache' ? require('./MemcacheStore.coffee') : require('./FileStore.coffee'));
      this.sessions = this.Store.read('session_data', function(err, data) {
        if (err) {
          console.log(err);
        } else {
          return JSON.parse(data);
        }
      });
      console.log(this.sessions);
    }

    /*
    	fs.readFile('session_data', 'utf8', (err, data) =>
    		if err
    			return console.error(err)
    		else
    			@sessions = JSON.parse(data)
    	)
    */


    SessionStore.prototype.defaultCallback = function(err) {};

    SessionStore.prototype.get = function(sid, cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      return cb(null, this.sessions[sid]);
    };

    SessionStore.prototype.set = function(sid, data, cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      this.sessions[sid] = data;
      return this.save(function() {
        return cb(null);
      });
    };

    SessionStore.prototype.save = function(cb) {
      return this.Store.write("session_data", JSON.stringify(this.sessions), function(err) {
        if (err) {
          console.log(err);
          console.error("Session data could not be saved: " + err);
        } else {
          console.log("Session data saved.");
        }
        return cb();
      });
      /*
      		fs.writeFile("session_data", JSON.stringify(@sessions), (err) ->
      			if err
      				console.error("Session data could not be saved: " + err)
      			else
      				console.log("Session data saved.")
      			cb()
      		)
      */

    };

    SessionStore.prototype.destroy = function(sid, cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      delete this.sessions[sid];
      return this.save(function() {
        return cb(null);
      });
    };

    SessionStore.prototype.all = function(cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      return cb(this.sessions);
    };

    SessionStore.prototype.clear = function(cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      this.sessions = {};
      return cb();
    };

    SessionStore.prototype.length = function(cb) {
      if (cb == null) {
        cb = this.defaultCallback;
      }
      return cb(this.sessions.length);
    };

    return SessionStore;

  })(require('connect').session.Store);

}).call(this);
